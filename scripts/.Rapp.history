y <- window(log10(UKgas), end = time(UKgas)[100])#
trend <- 1:length(y)#
cos_t <- cos(2 * pi * trend /4)#
sin_t <- sin(2 * pi * trend /4)#
dat <- data.frame(y, trend, cos_t, sin_t)#
future <- length(y) + 1:8#
new_data <- data.frame(trend = future, cos_t = cos(2 * pi * future / 4), #
  sin_t = sin(2 * pi * future / 4))
fit <- walker(y ~ trend + cos_t + sin_t, data = dat, chains = 1, iter = 500, #
  newdata = new_data, beta = cbind(0, rep(10, 4)), sigma = cbind(0, rep(10, 5)))
print(fit, pars = c("sigma_y", "sigma_b"))
mean_fit <- matrix(summary(fit, "beta")$summary[, "mean"], ncol = 4)
mean_fit
ts.plot(cbind(y, rowSums(mean_fit * cbind(1, as.matrix(dat[, -1])))),#
  col = 1:2, lwd = 2:1)
intervals <- summary(fit, pars = "y_new")$summary[, c("mean", "2.5%", "97.5%")]
ts.plot(log10(UKgas), ts(intervals, start = end(y) + c(0,1), frequency = 4),#
  col = c(1, 2, 2, 2), lty = c(1, 1, 2, 2))
set.seed(123)#
n <- 100#
beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
x1 <- rnorm(n, 1)#
x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
u <- cumsum(rnorm(n))#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)#
lines(u + beta1 * x1 + beta2 * x2, col = 2)#
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
print(kalman_walker, pars = c("sigma_y", "sigma_b"))
betas <- extract(kalman_walker, "beta")[[1]]
ts.plot(cbind(u, beta1, beta2, apply(betas, 2, colMeans)), #
  col = 1:3, lty = rep(2:1, each = 3))
sum(get_elapsed_time(kalman_walker))#
naive_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1, #
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)), #
  naive = TRUE)#
print(naive_walker, pars = c("sigma_y", "sigma_b"))
sum(get_elapsed_time(naive_walker))
y <- window(log10(UKgas), end = time(UKgas)[100])#
trend <- 1:length(y)#
cos_t <- cos(2 * pi * trend /4)#
sin_t <- sin(2 * pi * trend /4)#
dat <- data.frame(y, trend, cos_t, sin_t)#
future <- length(y) + 1:8#
new_data <- data.frame(trend = future, cos_t = cos(2 * pi * future / 4), #
  sin_t = sin(2 * pi * future / 4))
new_data
dim(new_data)
set.seed(123)#
n <- 100#
beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
x1 <- rnorm(n, 1)#
x2 <- 0.25 * cos(1:n)
x1
x2
y
set.seed(123)#
n <- 100#
beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
x1 <- rnorm(n, 1)#
x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
u <- cumsum(rnorm(n))#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)#
lines(u + beta1 * x1 + beta2 * x2, col = 2)
y
plot(y, type='l')
ts.plot(y)
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
print(kalman_walker, pars = c("sigma_y", "sigma_b"))
betas <- extract(kalman_walker, "beta")[[1]]
betas
ts.plot(cbind(u, beta1, beta2, apply(betas, 2, colMeans)), #
  col = 1:3, lty = rep(2:1, each = 3))
kalman_walker <- walker(y ~ x1, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
kalman_walker <- walker(y ~ x1, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(1, 3)), sigma_prior = cbind(0, rep(1, 4)))
kalman_walker <- walker(y ~ x1, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(1, 3)), sigma_prior = cbind(0, rep(1, 2)))
set.seed(1)#
n <- 100#
beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
x1 <- rnorm(n, mean = 2)#
x2 <- cos(1:n)#
u <- cumsum(rnorm(n, 0, 0.5))#
ts.plot(cbind(u, beta1 * x1, beta2 * x2), col = 1:3)
signal <- u + beta1 * x1 + beta2 * x2#
y <- rnorm(n, signal, 0.5)#
ts.plot(cbind(signal, y), col = 1:2)
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1)
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
cbind(0, rep(2, 3))
cbind(0, rep(2, 4))
fit <- walker(y ~ -1 + rw1(~ x1 + x2, beta_prior = c(0, 10), sigma_prior = c(0, 10)), #
  refresh = 0, chains = 2, sigma_y_prior = c(0, 10))
?rw1
#' Construct a first-order random walk component #
#' #
#' Auxiliary function used inside of the formula of \code{walker}.#
#' #
#' @export#
#' @param formula Formula for RW1 part of the model. Only right-hand-side is used. #
#' @param data Optional data.frame.#
#' @param beta_prior A length vector of length two which defines the #
#' prior mean and standard deviation of the Gaussian prior for coefficients at time 1.#
#' @param sigma_prior A vector of length two, defining the truncated Gaussian prior for #
#' the coefficient level standard deviation. #
rw1 <- function(formula, data, beta_prior, sigma_prior) {#
  mf <- match.call(expand.dots = FALSE)#
  mf <- mf[c(1L, match(c("formula", "data"), names(mf), 0L))]#
  mf$drop.unused.levels <- TRUE#
  mf$na.action <- as.name("na.pass")#
  mf[[1L]] <- quote(stats::model.frame)#
  mf <- eval(mf, parent.frame())#
  xreg <- model.matrix(attr(mf, "terms"), mf)#
  if(length(beta_prior) != 2) {#
    stop("beta_prior should be a vector of length two, defining the mean and standard deviation for the Gaussian prior of coefficients. ")#
  }#
  if(length(sigma_prior) != 2) {#
    stop("sigma_prior should be should be a vector of length two, defining the mean and standard deviation for the Gaussian prior of standard deviations. ")#
  }#
  list(xreg = xreg, beta_prior = beta_prior, #
    sigma_prior = sigma_prior)#
}#
#' Construct a first-order random walk component #
#' #
#' Auxiliary function used inside of the formula of \code{walker}.#
#' #
#' @export#
#' @param formula Formula for RW1 part of the model. Only right-hand-side is used. #
#' @param data Optional data.frame.#
#' @param beta_prior A vector of length two which defines the #
#' prior mean and standard deviation of the Gaussian prior for coefficients at time 1.#
#' @param sigma_prior A vector of length two, defining the truncated Gaussian prior for #
#' the slope level standard deviation. #
#' @param slope_prior A vector of length two which defines the #
#' prior mean and standard deviation of the Gaussian prior for the slopes at time 1.#
#' @export#
rw2 <- function(formula, data, beta_prior, sigma_prior, slope_prior) {#
  mf <- match.call(expand.dots = FALSE)#
  mf <- mf[c(1L, match(c("formula", "data"), names(mf), 0L))]#
  mf$drop.unused.levels <- TRUE#
  mf$na.action <- as.name("na.pass")#
  mf[[1L]] <- quote(stats::model.frame)#
  mf <- eval(mf, parent.frame())#
  xreg <- model.matrix(attr(mf, "terms"), mf)#
  if(length(beta_prior) != 2) {#
    stop("beta_prior should be a vector of length two, defining the mean and standard deviation for the Gaussian prior of initial coefficients. ")#
  }#
  if(length(sigma_prior) != 2) {#
    stop("sigma_prior should be should be a vector of length two, defining the mean and standard deviation for the Gaussian prior of standard deviations. ")#
  }#
  if(length(slope_prior) != 2) {#
    stop("slope_prior should be should be a vector of length two, defining the mean and standard deviation for the Gaussian prior of initial slope coeffients. ")#
  }#
  list(xreg = xreg, beta_prior = beta_prior, #
    sigma_prior = sigma_prior, slope_prior = slope_prior)#
}
fit <- walker(y ~ -1 + rw1(~ x1 + x2, beta_prior = c(0, 10), sigma_prior = c(0, 10)), #
  refresh = 0, chains = 2, sigma_y_prior = c(0, 10))
help(rw2)
#' Construct a first-order random walk component #
#' #
#' Auxiliary function used inside of the formula of \code{walker}.#
#' #
#' @export#
#' @param formula Formula for RW1 part of the model. Only right-hand-side is used. #
#' @param data Optional data.frame.#
#' @param beta_prior A length vector of length two which defines the #
#' prior mean and standard deviation of the Gaussian prior for coefficients at time 1.#
#' @param sigma_prior A vector of length two, defining the truncated Gaussian prior for #
#' the coefficient level standard deviation. #
rw1 <- function(formula, data, beta_prior, sigma_prior) {#
  mf <- match.call(expand.dots = FALSE)#
  mf <- mf[c(1L, match(c("formula", "data"), names(mf), 0L))]#
  mf$drop.unused.levels <- TRUE#
  mf$na.action <- as.name("na.pass")#
  mf[[1L]] <- quote(stats::model.frame)#
  mf <- eval(mf, parent.frame())#
  xreg <- model.matrix(attr(mf, "terms"), mf)#
  if(length(beta_prior) != 2) {#
    stop("beta_prior should be a vector of length two, defining the mean and standard deviation for the Gaussian prior of coefficients. ")#
  }#
  if(length(sigma_prior) != 2) {#
    stop("sigma_prior should be should be a vector of length two, defining the mean and standard deviation for the Gaussian prior of standard deviations. ")#
  }#
  list(xreg = xreg, beta_prior = beta_prior, #
    sigma_prior = sigma_prior)#
}#
#' Construct a first-order random walk component #
#' #
#' Auxiliary function used inside of the formula of \code{walker}.#
#' #
#' @export#
#' @param formula Formula for RW1 part of the model. Only right-hand-side is used. #
#' @param data Optional data.frame.#
#' @param beta_prior A vector of length two which defines the #
#' prior mean and standard deviation of the Gaussian prior for coefficients at time 1.#
#' @param sigma_prior A vector of length two, defining the truncated Gaussian prior for #
#' the slope level standard deviation. #
#' @param slope_prior A vector of length two which defines the #
#' prior mean and standard deviation of the Gaussian prior for the slopes at time 1.#
#' @export#
rw2 <- function(formula, data, beta_prior, sigma_prior, slope_prior) {#
  mf <- match.call(expand.dots = FALSE)#
  mf <- mf[c(1L, match(c("formula", "data"), names(mf), 0L))]#
  mf$drop.unused.levels <- TRUE#
  mf$na.action <- as.name("na.pass")#
  mf[[1L]] <- quote(stats::model.frame)#
  mf <- eval(mf, parent.frame())#
  xreg <- model.matrix(attr(mf, "terms"), mf)#
  if(length(beta_prior) != 2) {#
    stop("beta_prior should be a vector of length two, defining the mean and standard deviation for the Gaussian prior of initial coefficients. ")#
  }#
  if(length(sigma_prior) != 2) {#
    stop("sigma_prior should be should be a vector of length two, defining the mean and standard deviation for the Gaussian prior of standard deviations. ")#
  }#
  if(length(slope_prior) != 2) {#
    stop("slope_prior should be should be a vector of length two, defining the mean and standard deviation for the Gaussian prior of initial slope coeffients. ")#
  }#
  list(xreg = xreg, beta_prior = beta_prior, #
    sigma_prior = sigma_prior, slope_prior = slope_prior)#
}
?rw1
rw1
rw2
fit_rw2 <-walker(y ~ -1 + #
    rw2(~ x1 + x2, beta_prior = c(0, 10), sigma_prior = c(0, 10), slope_prior = c(0, 10)), #
  refresh = 0, chains = 2, sigma_y_prior = c(0, 10))
set.seed(1)#
n <- 100#
beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
x1 <- rnorm(n, mean = 2)#
x2 <- cos(1:n)#
u <- cumsum(rnorm(n, 0, 0.5))#
ts.plot(cbind(u, beta1 * x1, beta2 * x2), col = 1:3)
signal <- u + beta1 * x1 + beta2 * x2#
y <- rnorm(n, signal, 0.5)#
ts.plot(cbind(signal, y), col = 1:2)
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = c(0, 10), sigma_prior = c(0, 10))
cbind(0, rep(2, 3))
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  cbind(0, rep(2, 3)), sigma_prior = c(0, 10))
dd <- data.frame(y, x1, x2)
head(dd)
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  cbind(0, rep(2, 3)), sigma_prior = c(0, 10), data = dd)
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)), data = dd)
set.seed(123)#
n <- 100#
beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
x1 <- rnorm(n, 1)#
x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
u <- cumsum(rnorm(n))#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)
lines(u + beta1 * x1 + beta2 * x2, col = 2)
beta1
plot(beta1)
plot(beta1, type='l')
plot(beta2, type='l')
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))#
print(kalman_walker, pars = c("sigma_y", "sigma_b"))
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
library(walker)
?walker
y <- window(log10(UKgas), end = time(UKgas)[100])#
trend <- 1:length(y)#
cos_t <- cos(2 * pi * trend /4)#
sin_t <- sin(2 * pi * trend /4)#
dat <- data.frame(y, trend, cos_t, sin_t)#
future <- length(y) + 1:8#
new_data <- data.frame(trend = future, cos_t = cos(2 * pi * future / 4), #
  sin_t = sin(2 * pi * future / 4))#
fit <- walker(y ~ trend + cos_t + sin_t, data = dat, chains = 1, iter = 500, #
  newdata = new_data, beta = cbind(0, rep(10, 4)), sigma = cbind(0, rep(10, 5)))
set.seed(123)#
n <- 100#
beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
x1 <- rnorm(n, 1)#
x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
u <- cumsum(rnorm(n))#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)
lines(u + beta1 * x1 + beta2 * x2, col = 2)#
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
n <- 100#
beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))
ts.plot(beta1)
length(beta1)
beta1 <-  seq(0.5, 0, length.out = n)
beta1
beta1 <-  seq(0.5, 0, length.out = n) + rnorm(n, 0, 0.1)
ts.series(beta1)
ts.plot(beta1)
beta1 <-  seq(0.5, 0, length.out = n) + rnorm(n, 0, 0.05)#
ts.plot(beta1)
beta2 <-  seq(0, 0.8, length.out = n) + rnorm(n, 0, 0.05)#
ts.plot(beta2)
x1 <- rnorm(n, 1)
x1
mean(x1)
sd(x1)
x1 <- rnorm(n, 1, 1)
ts.plot(x1)
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)
x1 <- seq(0, 1, length.out = n)
x1
x1 <- seq(0, 1, length.out = n)#
x2 <- seq(0, 1, length.out = n)#
#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)
u <- cumsum(rnorm(n))
u
ts.plot(u)
u <- rnorm(n, 0, 0.5)
ts.plot(u)
u <- rnorm(n, 0, 0.1)
ts.plot(u)
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)
ts.plot(y)
lines(u + beta1 * x1 + beta2 * x2, col = 2)
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
## Not run: #
## Comparing the approaches, note that with such a small data #
## the differences aren't huge, but try same with n = 500 and/or more terms...#
set.seed(123)#
n <- 100#
beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
x1 <- rnorm(n, 1)#
x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
u <- cumsum(rnorm(n))#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)#
lines(u + beta1 * x1 + beta2 * x2, col = 2)#
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))#
print(kalman_walker, pars = c("sigma_y", "sigma_b"))#
betas <- extract(kalman_walker, "beta")[[1]]#
ts.plot(cbind(u, beta1, beta2, apply(betas, 2, colMeans)), #
  col = 1:3, lty = rep(2:1, each = 3))
library(walker)
?walker
set.seed(123)#
n <- 100#
beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
x1 <- rnorm(n, 1)#
x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
u <- cumsum(rnorm(n))#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)#
lines(u + beta1 * x1 + beta2 * x2, col = 2)#
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
print(kalman_walker, pars = c("sigma_y", "sigma_b"))
betas <- extract(kalman_walker, "beta")[[1]]#
ts.plot(cbind(u, beta1, beta2, apply(betas, 2, colMeans)), #
  col = 1:3, lty = rep(2:1, each = 3))
set.seed(123)#
#
n <- 100#
beta1 <- cumsum(c(0.5, rnorm(n - 1,  0,  sd = 0.05)))#
ts.plot(beta1)
beta1 <-  seq(0.5, 0, length.out = n) + rnorm(n, 0, 0.05)#
ts.plot(beta1)
beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
x1 <- rnorm(n, 1)#
x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
u <- cumsum(rnorm(n))#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)#
lines(u + beta1 * x1 + beta2 * x2, col = 2)
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
print(kalman_walker, pars = c("sigma_y", "sigma_b"))#
betas <- extract(kalman_walker, "beta")[[1]]#
ts.plot(cbind(u, beta1, beta2, apply(betas, 2, colMeans)), #
  col = 1:3, lty = rep(2:1, each = 3))
## Not run: #
## Comparing the approaches, note that with such a small data #
## the differences aren't huge, but try same with n = 500 and/or more terms...#
set.seed(123)#
n <- 100
beta1 <-  seq(5.5, 0, length.out = n) + rnorm(n, 0, 0.05)
beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
x1 <- rnorm(n, 1)#
x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
u <- cumsum(rnorm(n))#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)#
lines(u + beta1 * x1 + beta2 * x2, col = 2)
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 9)), sigma_prior = cbind(0, rep(2, 12)))
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
cbind(0, rep(2, 4))
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(8, 3)), sigma_prior = cbind(0, rep(8, 4)))
beta1 <-  seq(2.5, 0, length.out = n) + rnorm(n, 0, 0.05)
x1 <- rnorm(n, 1)#
x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
u <- cumsum(rnorm(n))#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)#
lines(u + beta1 * x1 + beta2 * x2, col = 2)
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
clear.all()
set.seed(123)#
n <- 100#
beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
x1 <- rnorm(n, 1)#
x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
u <- cumsum(rnorm(n))#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)#
lines(u + beta1 * x1 + beta2 * x2, col = 2)#
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))#
print(kalman_walker, pars = c("sigma_y", "sigma_b"))#
betas <- extract(kalman_walker, "beta")[[1]]#
ts.plot(cbind(u, beta1, beta2, apply(betas, 2, colMeans)), #
  col = 1:3, lty = rep(2:1, each = 3))
library(walker)
set.seed(123)#
n <- 100#
beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
x1 <- rnorm(n, 1)#
x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
u <- cumsum(rnorm(n))#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)#
lines(u + beta1 * x1 + beta2 * x2, col = 2)#
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))#
print(kalman_walker, pars = c("sigma_y", "sigma_b"))#
betas <- extract(kalman_walker, "beta")[[1]]#
ts.plot(cbind(u, beta1, beta2, apply(betas, 2, colMeans)), #
  col = 1:3, lty = rep(2:1, each = 3))
?walker
set.seed(123)#
n <- 100#
beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
x1 <- rnorm(n, 1)#
x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
u <- cumsum(rnorm(n))#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)#
lines(u + beta1 * x1 + beta2 * x2, col = 2)#
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))#
print(kalman_walker, pars = c("sigma_y", "sigma_b"))#
betas <- extract(kalman_walker, "beta")[[1]]#
ts.plot(cbind(u, beta1, beta2, apply(betas, 2, colMeans)), #
  col = 1:3, lty = rep(2:1, each = 3))#
sum(get_elapsed_time(kalman_walker))#
naive_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1, #
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)), #
  naive = TRUE)
print(naive_walker, pars = c("sigma_y", "sigma_b"))
set.seed(123)#
n <- 100#
beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))
summary(beta1)
beta1 <- seq(0.3, 1.0, length.out = n) + rnorm(n, 0, 0.1)
summary(beta1)
set.seed(123)#
n <- 100#
# beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta1 <- seq(0.3, 1.0, length.out = n) + rnorm(n, 0, 0.1)#
beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
x1 <- rnorm(n, 1)#
x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
u <- cumsum(rnorm(n))#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)#
lines(u + beta1 * x1 + beta2 * x2, col = 2)#
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
print(kalman_walker, pars = c("sigma_y", "sigma_b"))#
betas <- extract(kalman_walker, "beta")[[1]]#
ts.plot(cbind(u, beta1, beta2, apply(betas, 2, colMeans)), #
  col = 1:3, lty = rep(2:1, each = 3))
x1 <- rnorm(n, 1)
summary(x1)
x1 <- seq(-2, 3, length.out = n) + rnorm(n, 0, 0.1)
summary(x1)
ts.plot(x1)
x1 <- seq(-2, 3, length.out = n) + rnorm(n, 0, 0.3)
ts.plot(x1)
set.seed(123)#
n <- 100#
# beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta1 <- seq(0.3, 1.0, length.out = n) + rnorm(n, 0, 0.1)#
beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
# x1 <- rnorm(n, 1)#
#
x1 <- seq(-2, 3, length.out = n) + rnorm(n, 0, 0.3)#
x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)
u <- cumsum(rnorm(n))#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)#
lines(u + beta1 * x1 + beta2 * x2, col = 2)
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
print(kalman_walker, pars = c("sigma_y", "sigma_b"))#
betas <- extract(kalman_walker, "beta")[[1]]#
ts.plot(cbind(u, beta1, beta2, apply(betas, 2, colMeans)), #
  col = 1:3, lty = rep(2:1, each = 3))
print(kalman_walker, pars = c("sigma_y", "sigma_b"))#
betas <- extract(kalman_walker, "beta")[[1]]#
ts.plot(cbind(u, beta1, apply(betas, 2, colMeans)), #
  col = 1:2, lty = rep(2:1, each = 2))
beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))
summary(beta2)
set.seed(123)#
n <- 100#
# beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta1 <- seq(0.3, 1.0, length.out = n) + rnorm(n, 0, 0.1)#
beta2 <- seq(-2.0,  -1.0, length.out = n) + rnorm(n, 0, 0.1)#
# beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
# x1 <- rnorm(n, 1)#
#
x1 <- seq(-2, 3, length.out = n) + rnorm(n, 0, 0.3)#
x2 <- seq(-2, 3, length.out = n) + rnorm(n, 0, 0.3)#
# x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)
u <- cumsum(rnorm(n))#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)
lines(u + beta1 * x1 + beta2 * x2, col = 2)
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
library("walker")#
#
set.seed(123)#
n <- 100#
# beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta1 <- seq(0.3, 1.0, length.out = n) + rnorm(n, 0, 0.1)#
beta2 <- seq(-2.0,  -1.0, length.out = n) + rnorm(n, 0, 0.1)#
# beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
# x1 <- rnorm(n, 1)#
#
x1 <- seq(-2, 3, length.out = n) + rnorm(n, 0, 0.3)#
x2 <- seq(-2, 3, length.out = n) + rnorm(n, 0, 0.3)#
# x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
# u <- cumsum(rnorm(n))#
u <- rnorm(n)#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)#
lines(u + beta1 * x1 + beta2 * x2, col = 2)#
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
library(walker)
library("walker")#
#
set.seed(123)#
n <- 100#
# beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta1 <- seq(0.3, 1.0, length.out = n) + rnorm(n, 0, 0.1)#
beta2 <- seq(-2.0,  -1.0, length.out = n) + rnorm(n, 0, 0.1)#
# beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
# x1 <- rnorm(n, 1)#
#
x1 <- seq(-2, 3, length.out = n) + rnorm(n, 0, 0.3)#
x2 <- seq(-2, 3, length.out = n) + rnorm(n, 0, 0.3)#
# x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
# u <- cumsum(rnorm(n))#
u <- rnorm(n)#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)#
lines(u + beta1 * x1 + beta2 * x2, col = 2)#
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
?walker
## the differences aren't huge, but try same with n = 500 and/or more terms...#
set.seed(123)#
n <- 100#
beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
x1 <- rnorm(n, 1)#
x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
u <- cumsum(rnorm(n))#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)#
lines(u + beta1 * x1 + beta2 * x2, col = 2)#
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))#
print(kalman_walker, pars = c("sigma_y", "sigma_b"))#
betas <- extract(kalman_walker, "beta")[[1]]#
ts.plot(cbind(u, beta1, beta2, apply(betas, 2, colMeans)), #
  col = 1:3, lty = rep(2:1, each = 3))
rm(list = ls())
## the differences aren't huge, but try same with n = 500 and/or more terms...#
set.seed(123)#
n <- 100#
beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
x1 <- rnorm(n, 1)#
x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
u <- cumsum(rnorm(n))#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)#
lines(u + beta1 * x1 + beta2 * x2, col = 2)#
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))#
print(kalman_walker, pars = c("sigma_y", "sigma_b"))#
betas <- extract(kalman_walker, "beta")[[1]]#
ts.plot(cbind(u, beta1, beta2, apply(betas, 2, colMeans)), #
  col = 1:3, lty = rep(2:1, each = 3))
library(walker)
## the differences aren't huge, but try same with n = 500 and/or more terms...#
set.seed(123)#
n <- 100#
beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
x1 <- rnorm(n, 1)#
x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
u <- cumsum(rnorm(n))#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)#
lines(u + beta1 * x1 + beta2 * x2, col = 2)#
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))#
print(kalman_walker, pars = c("sigma_y", "sigma_b"))#
betas <- extract(kalman_walker, "beta")[[1]]#
ts.plot(cbind(u, beta1, beta2, apply(betas, 2, colMeans)), #
  col = 1:3, lty = rep(2:1, each = 3))
library("walker")#
#
set.seed(123)#
n <- 100#
# beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta1 <- seq(0.3, 1.0, length.out = n) + rnorm(n, 0, 0.1)#
beta2 <- seq(-2.0,  -1.0, length.out = n) + rnorm(n, 0, 0.1)#
# beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
# x1 <- rnorm(n, 1)#
#
x1 <- seq(-2, 3, length.out = n) + rnorm(n, 0, 0.3)#
x2 <- seq(-2, 3, length.out = n) + rnorm(n, 0, 0.3)#
# x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
u <- cumsum(rnorm(n))#
#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)
lines(u + beta1 * x1 + beta2 * x2, col = 2)
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
library("walker")#
#
# set.seed(123)#
n <- 200#
# beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta1 <- seq(0.3, 4.0, length.out = n) + rnorm(n, 0, 0.1)#
beta2 <- seq(-1.0,  -5.0, length.out = n) + rnorm(n, 0, 0.1)#
# beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
# x1 <- rnorm(n, 1)#
#
x1 <- seq(-2, 3, length.out = n) + rnorm(n, 0, 0.3)#
# x2 <- seq(-2, 3, length.out = n) + rnorm(n, 0, 0.3)#
x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
#
u <- cumsum(rnorm(n))#
#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)#
lines(u + beta1 * x1 + beta2 * x2, col = 2)#
#
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
kalman_walker <- walker(y ~ x1, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
library("walker")#
#
# set.seed(123)#
n <- 200#
# beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta1 <- seq(0.3, 4.0, length.out = n) + rnorm(n, 0, 0.1)#
beta2 <- seq(-1.0,  -5.0, length.out = n) + rnorm(n, 0, 0.1)#
# beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
# x1 <- rnorm(n, 1)#
#
x1 <- seq(-2, 3, length.out = n) + rnorm(n, 0, 0.3)#
# x2 <- seq(-2, 3, length.out = n) + rnorm(n, 0, 0.3)#
x2 <- 0.25 * cos(1:n)#
ts.plot(cbind(beta1 * x1, beta2 *x2), col = 1:2)#
#
u <- cumsum(rnorm(n))#
#
y <- rnorm(n, u + beta1 * x1 + beta2 * x2)#
ts.plot(y)#
lines(u + beta1 * x1 + beta2 * x2, col = 2)#
#
kalman_walker <- walker(y ~ x1 + x2, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 3)), sigma_prior = cbind(0, rep(2, 4)))
# only one variable#
library("walker")#
#
# set.seed(123)#
n <- 200#
# beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta1 <- seq(0.3, 4.0, length.out = n) + rnorm(n, 0, 0.1)#
# beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
# x1 <- rnorm(n, 1)#
#
x1 <- seq(-2, 3, length.out = n) + rnorm(n, 0, 0.3)#
ts.plot(cbind(beta1 * x1), col = 1:2)#
#
u <- cumsum(rnorm(n))#
#
y <- rnorm(n, u + beta1 * x1)#
ts.plot(y)#
lines(u + beta1 * x1, col = 2)
kalman_walker <- walker(y ~ x1, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 2)), sigma_prior = cbind(0, rep(2, 3)))
library("walker")#
#
# set.seed(123)#
n <- 200#
# beta1 <- cumsum(c(0.5, rnorm(n - 1, 0, sd = 0.05)))#
beta1 <- seq(0.3, 4.0, length.out = n) + rnorm(n, 0, 0.1)#
# beta2 <- cumsum(c(-1, rnorm(n - 1, 0, sd = 0.15)))#
# x1 <- rnorm(n, 1)#
#
x1 <- seq(-2, 3, length.out = n) + rnorm(n, 0, 0.3)#
ts.plot(cbind(beta1 * x1), col = 1:2)#
#
u <- cumsum(rnorm(n))#
#
y <- rnorm(n, u + beta1 * x1)#
ts.plot(y)#
lines(u + beta1 * x1, col = 2)
kalman_walker <- walker(y ~ x1, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 2)), sigma_prior = cbind(0, rep(2, 3)))
library("walker")#
#
# set.seed(123)#
n <- 200#
beta1 <- seq(0.3, 4.0, length.out = n) + rnorm(n, 0, 0.1)#
#
x1 <- seq(-2, 3, length.out = n) + rnorm(n, 0, 0.3)#
ts.plot(cbind(beta1 * x1), col = 1)
# set.seed(123)#
n <- 200#
beta1 <- seq(0.3, 4.0, length.out = n) + rnorm(n, 0, 0.2)#
#
x1 <- seq(-2, 3, length.out = n) + rnorm(n, 0, 0.3)#
ts.plot(cbind(beta1 * x1), col = 1)
u <- cumsum(rnorm(n))#
#
y <- rnorm(n, u + beta1 * x1)#
ts.plot(y)#
lines(u + beta1 * x1, col = 2)
kalman_walker <- walker(y ~ x1, iter = 2000, chains = 1,#
  beta_prior = cbind(0, rep(2, 2)), sigma_prior = cbind(0, rep(2, 3)))
rice
library(rice)
update.packages()
q()
470 + 550
1070 + 245
60000*.008
dir()
ls()
q()
library(rstanarm)#
library(ggplot2)#
library(lme4)#
set.seed(0)#
num_grps <- 5#
num_pnts_per_grp <- 10#
x <- matrix(rnorm(num_pnts_per_grp * num_grps, 1:num_grps, 0.5), nrow=num_grps)#
y <- 1:num_grps * 2 + 4 + rep(-1, num_grps) * x + rnorm(x, sd=0.1)#
grp <- rep(letters[1:num_grps], num_pnts_per_grp)#
df <- data.frame(grp, x=c(x), y=c(y))#
p <- ggplot(df, aes(x, y))#
p + geom_point(aes(color = grp))#
#
fit <- stan_lmer(y ~ x + (x|grp), data=df, seed=0, chains=2, cores=2, iter=1000)#
lmfit <- lmer(y ~ x + (x|grp), data=df)#
#
plot(fit, plotfun="hist", pars=names(fit$stanfit))#
#
coef(fit)#
coef(lmfit)
update.packages()
library(bsts)     # load the bsts package#
data(iclaims)     # bring the initial.claims data into scope#
#
 ss <- AddLocalLinearTrend(list(), initial.claims$iclaimsNSA)#
ss <- AddSeasonal(ss, initial.claims$iclaimsNSA, nseasons = 52)#
model1 <- bsts(initial.claims$iclaimsNSA,#
               state.specification = ss,#
               niter = 1000)
plot(model2, "coef")
plot(model1, "coef")
model2 <- bsts(iclaimsNSA ~ .,#
               state.specification = ss,#
               niter = 1000,#
               data = initial.claims)
plot(model1, "coef")
plot(model2, "coef")
bsts.prediction.errors(model2)
library(ggthemes)
my_map_theme <- theme_map(base_family = "myfont") +#
  theme(strip.background = element_blank(),#
        strip.text = element_text(size = rel(1), face = "bold"),#
        plot.caption = element_text(colour = "grey50"))
300*60
err_trials <- cleaned_df %>%#
  dplyr::filter(correct == 0)
347*72
install.packages("catR")
library(catR)
bank <- genPolyMatrix(items = 20, model = "PCM", nrCat = 5)
bank
start <- list(nrItems = 1, theta = 0)
test <- list(itemSelect = "KL", method = "BM")
stop <- list(rule = "precision", thr = 0.3)
final <- list(method = "ML")
dim(final)
final
res <- randomCAT(trueTheta = 1, itemBank = bank, model = "PCM",#
      start = start, test = test, stop = stop, final = final)
res
thetas <- seq(from = -2, to = 2, length = 20)
res3 <- simulateRespondents(thetas = thetas, itemBank = bank,#
    model = "PCM", start = start, test = test, stop = stop, final = final)
res3
res3 <- simulateRespondents(thetas = thetas, itemBank = bank,#
    model = "PCM", start = start, test = test, stop = stop, final = final, save.output = TRUE)
res3
library(mokken)
install.packages("mokken")
library(mokken)
data(acl)
Communality <- acl[, 1:10]
Communality
scale <- aisp(Communality, verbose = FALSE)
scale
help(aisp)
coefH(Communality[,scale==1])
coefH(Communality[,scale==2])
coefH(Communality[,scale==0])
? coefH
#+ setup#
library("tidyverse")#
library("readxl")#
library("mice")#
library("VIM")#
library("paran")#
library("psych")#
library("lavaan")#
#
setwd("/Users/corrado/Dropbox/papers/meyer/src")#
#
fai_s <- read_xlsx("../data/FAI_S_OTTOBRE.xlsx")#
#
glimpse(fai_s)
#--------------------------------------------------------------------------------------------------#
# select columns corresponding to the items#
items <- fai_s[, 42:238]#
#
#--------------------------------------------------------------------------------------------------#
# multiple imputation#
md.pattern(items)#
#
mice_plot <- aggr(items, col=c('navyblue','yellow'),#
                  numbers=TRUE, sortVars=TRUE,#
                  labels=names(items), cex.axis=.7,#
                  gap=3, ylab=c("Missing data","Pattern"))#
#
imputed_Data <- mice(items, m = 1, maxit = 1, method = 'pmm', seed = 500)#
#
complete_data <- complete(imputed_Data, 1)
glimpse(complete_data)
fai_s$`FAI-S 162` <- as.numeric(fai_s$`FAI-S 162`)
summary(fai_s)
paran(complete_data, iterations=5000)#
#
paran(complete_data, iterations = 5000, centile = 0, quietly = FALSE,#
      status = TRUE, all = TRUE, cfa = TRUE, graph = TRUE, color = TRUE,#
      col = c("black", "red", "blue"), lty = c(1, 2, 3), lwd = 1, legend = TRUE,#
      file = "", seed = 0)
#--------------------------------------------------------------------------------------------------#
# select columns corresponding to the items#
items <- fai_s[, 42:238]
imputed_Data <- mice(items, m = 1, maxit = 1, method = 'pmm', seed = 500)
complete_data <- complete(imputed_Data, 1)
paran(complete_data, iterations=5000)
paran(complete_data, iterations = 5000, centile = 0, quietly = FALSE,#
      status = TRUE, all = TRUE, cfa = TRUE, graph = TRUE, color = TRUE,#
      col = c("black", "red", "blue"), lty = c(1, 2, 3), lwd = 1, legend = TRUE,#
      file = "", seed = 0)
perc_cure <- with(complete_data,#
  data.frame(`FAI-S 156`, `FAI-S 67`, `FAI-S 176`, `FAI-S 77`, `FAI-S 28`,#
    `FAI-S 149`, `FAI-S 35`, `FAI-S 192`, `FAI-S 87`, `FAI-S 143`, `FAI-S 90`,#
    `FAI-S 160`, `FAI-S 69`, `FAI-S 170`, `FAI-S 79`, `FAI-S 24`, `FAI-S 76`,#
    `FAI-S 114`, `FAI-S 74`, `FAI-S 92`, `FAI-S 163`))
S <- cov(perc_cura)#
#
perc_cure_item_names <- c("FAI.S.156", "FAI.S.67", "FAI.S.176", "FAI.S.77",#
  "FAI.S.28", "FAI.S.149", "FAI.S.35", "FAI.S.192", "FAI.S.87", "FAI.S.143",#
  "FAI.S.90", "FAI.S.160", "FAI.S.69", "FAI.S.170", "FAI.S.79", "FAI.S.24",#
  "FAI.S.76", "FAI.S.114", "FAI.S.74", "FAI.S.92", "FAI.S.163")
S <- cov(perc_cure)
perc_cure_item_names <- c("FAI.S.156", "FAI.S.67", "FAI.S.176", "FAI.S.77",#
  "FAI.S.28", "FAI.S.149", "FAI.S.35", "FAI.S.192", "FAI.S.87", "FAI.S.143",#
  "FAI.S.90", "FAI.S.160", "FAI.S.69", "FAI.S.170", "FAI.S.79", "FAI.S.24",#
  "FAI.S.76", "FAI.S.114", "FAI.S.74", "FAI.S.92", "FAI.S.163")#
#
one.factor.model <-  '#
  F1 =~ NA*FAI.S.156 + FAI.S.67 + FAI.S.176 + FAI.S.77 + FAI.S.28 + FAI.S.149 +#
        FAI.S.35 + FAI.S.192 + FAI.S.87 + FAI.S.143 + FAI.S.90 + FAI.S.160 +#
        FAI.S.69 + FAI.S.170 + FAI.S.79 + FAI.S.24 + FAI.S.76 + FAI.S.114 +#
        FAI.S.74 + FAI.S.92 + FAI.S.163#
  # variances#
  F1 ~~ 1*F1#
  '
fit1 <- lavaan:::cfa(one.factor.model, data = perc_cure, #
                     ordered = perc_cure_item_names)
summary(fit1, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
